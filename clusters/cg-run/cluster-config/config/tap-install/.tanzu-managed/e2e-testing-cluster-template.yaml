#@ load("@ytt:data", "data")

---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: e2e-testing-cluster-template
spec:
  params:
    - name: serviceAccount
      default: default
  healthRule:
    singleConditionType: Ready

  #@ label_exclusions = "[\"" + "\", \"".join(data.values.label_propagation_exclusions) + "\"]"
  #@yaml/text-templated-strings
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     exclusions = (@= label_exclusions @)
    #@     for k,v in dict(data.values.workload.metadata.labels).items():
    #@       if k not in exclusions:
    #@         labels[k] = v
    #@       end
    #@     end
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-e2e-testing"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "e2e-testing" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: tekton-e2e-testing-taskrun

      inputs:
        serviceAccount: #@ data.values.params.serviceAccount
        taskRef:
          kind: ClusterTask
          name: e2e-testing-clustertask
